{"version":3,"sources":["components/cards/cards.jsx","components/main-view/main-view.jsx","App.js","serviceWorker.js","index.js"],"names":["Cards","props","console","log","cardsMixed","className","src","process","cardName","MainView","state","cards","mixed","cardCounter","i","length","j","Math","floor","random","this","setState","counter","alert","onClick","mixCards","getCard","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2TAIe,SAASA,EAAMC,GAE1B,OADAC,QAAQC,IAAIF,EAAMG,YAEd,yBAAKC,UAAU,UACTJ,EAAMG,YACJ,4DAEHH,EAAMG,YACH,wBAAIC,UAAU,WAAd,qBAEHJ,EAAMG,YACH,yBAAKC,UAAU,UAAUC,IAAMC,gBAAyBN,EAAMO,WAElE,yBAAKH,UAAU,aACX,yBAAKA,UAAU,aACf,yBAAKA,UAAU,aACf,yBAAKA,UAAU,e,UChBlBI,EAAb,YACI,aAAe,IAAD,8BACV,+CAEKC,MAAQ,CAOTC,MAAO,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACtGC,OAAO,EACPC,YAAa,GAZP,EADlB,sEAkBaF,GACLT,QAAQC,IAAIQ,GAEZ,IAAK,IAAIG,EAAIH,EAAMI,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACvC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADH,EAEhB,CAACH,EAAMK,GAAIL,EAAMG,IAAvCH,EAAMG,GAFgC,KAE5BH,EAAMK,GAFsB,KAK3CI,KAAKC,SAAS,CACVT,OAAO,EACPD,MAAOA,EACPE,YAAa,EACbL,SAAU,KAEdN,QAAQC,IAAIiB,KAAKV,MAAMC,SAhC/B,8BAmCYW,GAAU,IAAD,OACbpB,QAAQC,IAAImB,GACZpB,QAAQC,IAAIiB,KAAKV,MAAMC,MAAMW,IACxBF,KAAKV,MAAME,MAELU,EAAUF,KAAKV,MAAMC,MAAMI,QACA,IAA9BK,KAAKV,MAAMC,MAAMW,GACjBF,KAAKC,SAAS,CACVb,SAAU,eACX,WACCN,QAAQC,IAAI,EAAKO,MAAMF,aAG3BY,KAAKC,SAAS,CACVb,SAAS,SAAD,OAAWY,KAAKV,MAAMC,MAAMW,GAA5B,UACT,WACCpB,QAAQC,IAAI,EAAKO,MAAMF,aAG/Bc,IACAF,KAAKC,SAAS,CACVR,YAAaS,KAGjBF,KAAKC,SAAS,CACVT,OAAO,IArBXW,MAAM,mCAvClB,+BAiEc,IAAD,SAE2CH,KAAKV,MAA7CC,EAFH,EAEGA,MAAOC,EAFV,EAEUA,MAAOC,EAFjB,EAEiBA,YAAaL,EAF9B,EAE8BA,SAEnC,OAEI,yBAAKH,UAAU,uBACX,yBAAKA,UAAU,UACX,6CACA,yBAAKA,UAAU,YAAYC,IAAMC,gCACjC,yBAAKF,UAAU,YAAYC,IAAMC,iCAErC,kBAACP,EAAD,CAAOI,WAAYQ,EAAOJ,SAAUA,EAAUK,YAAaA,IAC3D,yBAAKR,UAAU,iBACX,4BAAQA,UAAU,gBAAgBmB,QAAS,kBAAM,EAAKC,SAASd,KAA/D,WACA,4BAAQN,UAAU,gBAAgBmB,QAAS,kBAAM,EAAKE,QAAQb,KAA9D,sBAhFpB,GAA8Bc,IAAMC,WCQrBC,G,uLANX,OACE,kBAAC,EAAD,U,GAHYD,cCQEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.06a5baee.chunk.js","sourcesContent":["import React from 'react';\n\nimport './cards.css';\n\nexport default function Cards(props) {\n    console.log(props.cardsMixed);\n    return (\n        <div className=\"cards\">\n            {!props.cardsMixed &&\n                <h2>Bitte die Karten mischen :-)</h2>\n            }\n            {props.cardsMixed &&\n                <h2 className=\"haveFun\">Viel Spa√ü! :-)</h2>\n            }\n            {props.cardsMixed &&\n                <img className=\"topCard\" src={ process.env.PUBLIC_URL + props.cardName }/>\n            }\n            <div className=\"cardStack\">\n                <div className=\"cardBack\"></div>\n                <div className=\"cardBack\"></div>\n                <div className=\"cardBack\"></div>\n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport Cards from '../cards/cards';\nimport './main-view.css';\n\nexport class MainView extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            /*\n                1 = rabbit one hoop 24x\n                2 = rabbit two hoops 8x\n                3 = rabbit three hoops 4x\n                4 = carrot 12x\n            */\n            cards: [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4],\n            mixed: false,\n            cardCounter: 0\n        };\n    }\n    // all necessary functions below\n    // this function mixes the cards\n    mixCards(cards) {\n        console.log(cards);\n        // shuffle the cards array\n        for (let i = cards.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [cards[i], cards[j]] = [cards[j], cards[i]];\n        }\n        // set new state\n        this.setState({\n            mixed: true,\n            cards: cards,\n            cardCounter: 0,\n            cardName: ''\n        });\n        console.log(this.state.cards);\n    }\n    // this function gets the current player a new card\n    getCard(counter) {\n        console.log(counter);\n        console.log(this.state.cards[counter]);\n        if (!this.state.mixed) {\n            alert('Bitte erst die Karten mischen');\n        } else if (counter < this.state.cards.length) {\n            if (this.state.cards[counter] === 4) {\n                this.setState({\n                    cardName: 'carrot.jpg'\n                }, () => {\n                    console.log(this.state.cardName);\n                });\n            } else {\n                this.setState({\n                    cardName: `rabbit${this.state.cards[counter]}.jpg`\n                }, () => {\n                    console.log(this.state.cardName);\n                });\n            }\n            counter++\n            this.setState({\n                cardCounter: counter\n            });\n        } else {\n            this.setState({\n                mixed: false\n            });\n        }\n    }\n    // render\n    render() {\n\n        const { cards, mixed, cardCounter, cardName } = this.state;\n\n        return (\n\n            <div className=\"lottiKarottiWrapper\">\n                <div className=\"header\">\n                    <h1>Lotti Karotti</h1>\n                    <img className=\"carrotImg\" src={ process.env.PUBLIC_URL + '/carrotImg.png' }/>\n                    <img className=\"rabbitImg\" src={ process.env.PUBLIC_URL + '/rabbitImg.png' }/>\n                </div>\n                <Cards cardsMixed={mixed} cardName={cardName} cardCounter={cardCounter}/>\n                <div className=\"buttonWrapper\">\n                    <button className=\"karottiButton\" onClick={() => this.mixCards(cards)} >Mischen</button>\n                    <button className=\"karottiButton\" onClick={() => this.getCard(cardCounter)}>Karte ziehen</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ( MainView );\n","import React, { Component } from 'react';\nimport { MainView } from './components/main-view/main-view';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <MainView />\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}